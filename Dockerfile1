## Use an official Node.js image as the base image
#FROM node:16 AS build
#
## Set the working directory inside the container
#WORKDIR /app
#
## Copy package.json and yarn.lock to the container
#COPY package.json yarn.lock /app/
#
## Install project dependencies
#RUN yarn install
#
## Copy the entire application to the container
#COPY . /app/
#
## Build the Angular application
#RUN yarn build

# Start a new stage for the production image
#FROM nginx:alpine
FROM nginx:1.25.3-alpine

#todo refer to gpt sln
# Set permissions to allow read access
#RUN chmod -R 755 /usr/share/nginx/html
#RUN chmod -R 755 /usr/share/nginx/html/assets
#RUN chmod -R 755 /usr/share/nginx/html/assets/images

# Add your nginx.conf
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copy SSL cert and key to nginx container
#COPY nginx/certs/bonvie.co.zw.crt /etc/nginx/certs/bonvie.co.zw.crt
#COPY nginx/certs/intermediate.crt /etc/nginx/certs/intermediate.crt
#COPY nginx/certs/bonvie.co.zw.key /etc/nginx/certs/bonvie.co.zw.key

# Copy the built artifacts from the previous stage
WORKDIR /usr/share/nginx/html
COPY .next .

# Expose the default port for Nginx
EXPOSE 80

# CMD is not needed as it will use the default CMD from the nginx image
